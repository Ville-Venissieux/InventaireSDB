<?php

namespace Venissieux\InventaireSDB\FrontBundle\Repository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository {

    public function search($data, $page = 0, $max = NULL, $sortColumn = null, $sortDirection = null, $disponibleOnly = false,$listeArticlesAExclure = null, $getResult = true) {
        $qb = $this->_em->createQueryBuilder();
        $query = isset($data['query']) && $data['query'] ? $data['query'] : null;

        $qb
                ->select('a')
                ->from('VenissieuxInventaireSDBFrontBundle:Article', 'a');
        
        
        //Dans le cas des articles disponibles (aucune occurence de prets avec une date de retour vide)
        if ($disponibleOnly)
        {
            $sub = $this->_em->createQueryBuilder();
            $sub->select('p');
            $sub->from('VenissieuxInventaireSDBFrontBundle:Pret','p');
            $sub->andWhere('p.article = a');
            $sub->andWhere('p.dateRetour is null');
            
            //Ajout de la condition (imbrication de la sous requête exists avec la requête initiale)
            $qb->andWhere($qb->expr()->not($qb->expr()->exists($sub->getDQL())));
       
        }
        

        //On ajoute un tri si demandé
        if (isset($sortColumn) && isset($sortDirection)) {
            $qb->orderBy('a.' . $sortColumn, $sortDirection);
        }
        
        //Dans le cas d'articles à exclure création d'une clause NOT IN
        if (isset($listeArticlesAExclure))
        {
            $qb->andWhere('a.id NOT IN (:listeArticlesAExclure)')
            ->setParameter('listeArticlesAExclure', $listeArticlesAExclure);
        }
        

        if ($query) {
            $qb
                    ->andWhere('UPPER(a.nom) like UPPER(:query)')
                    //->orWhere('UPPER(a.categorie.libelle) like UPPER(:query)')
                    ->orWhere('UPPER(a.commentaire) like UPPER(:query)')
                    ->setParameter('query', "%" . $query . "%")
            ;
            //Si la valeur recherchée est un entier, on ajoute une recherche sur l'id de l'article
            if (is_integer($query)) {
                $qb->orWhere('a.id = :queryInt')
                        ->setParameter('queryInt', (int) $query);
            }
        }

        if ($max) {
            $preparedQuery = $qb->getQuery()
                    ->setMaxResults($max)
                    ->setFirstResult($page * $max)
            ;
        } 
        else {
            $preparedQuery = $qb->getQuery();
        }

        return $getResult ? $preparedQuery->getResult() : $preparedQuery;
    }

}
